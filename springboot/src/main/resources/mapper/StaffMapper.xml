<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.StaffMapper">

    <sql id="Base_Column_List">
        id,username,password,name,avatar,role,sex,phone,email,birth,department_id
    </sql>

    <select id="selectAll" resultType="com.example.entity.Staff">
        select
        staff.*, department.name as departmentName
        from staff
        left join department
        on staff.department_id = department.id
        <where>
            <if test="id != null"> and staff.id = #{id}</if>
            <if test="username != null"> and staff.username like concat('%', #{username}, '%')</if>
            <if test="name != null"> and staff.name like concat('%', #{name}, '%')</if>
            <if test="phone != null"> and staff.phone like concat('%', #{phone}, '%')</if>
            <if test="departmentId != null"> and staff.department_id = #{departmentId}</if>
            <if test="departmentName != null"> and department.name like concat('%', #{departmentName}, '%')</if>
        </where>
        order by id desc
    </select>

    <select id="selectById" resultType="com.example.entity.Staff">
        select
        <include refid="Base_Column_List" />
        from staff
        where id = #{id}
    </select>

    <delete id="deleteById">
        delete from staff
        where  id = #{id}
    </delete>

    <insert id="insert" parameterType="com.example.entity.Staff" useGeneratedKeys="true">
        insert into staff
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="username != null">username,</if>
            <if test="password != null">password,</if>
            <if test="name != null">name,</if>
            <if test="avatar != null">avatar,</if>
            <if test="role != null">role,</if>
            <if test="sex != null">sex,</if>
            <if test="phone != null">phone,</if>
            <if test="email != null">email,</if>
            <if test="birth != null">birth,</if>
            <if test="departmentId != null">department_id,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id},</if>
            <if test="username != null">#{username},</if>
            <if test="password != null">#{password},</if>
            <if test="name != null">#{name},</if>
            <if test="avatar != null">#{avatar},</if>
            <if test="role != null">#{role},</if>
            <if test="sex != null">#{sex},</if>
            <if test="phone != null">#{phone},</if>
            <if test="email != null">#{email},</if>
            <if test="birth != null">#{birth},</if>
            <if test="departmentId != null">#{departmentId},</if>
        </trim>
    </insert>

    <update id="updateById" parameterType="com.example.entity.Staff">
        update staff
        <set>
            <if test="username != null">
                username = #{username},
            </if>
            <if test="password != null">
                password = #{password},
            </if>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="avatar != null">
                avatar = #{avatar},
            </if>
            <if test="role != null">
                role = #{role},
            </if>
            <if test="sex != null">
                sex = #{sex},
            </if>
            <if test="phone != null">
                phone = #{phone},
            </if>
            <if test="email != null">
                email = #{email},
            </if>
            <if test="birth != null">
                birth = #{birth},
            </if>
            <if test="departmentId != null">
                department_id = #{departmentId},
            </if>
        </set>
        where id = #{id} 
    </update>

</mapper>